generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  image           String?
  emailVerified   DateTime?
  accounts        Account[]
  sessions        Session[]
  authorizedEmail AuthorizedEmail?
}

model AuthorizedEmail {
  id     String  @id @default(cuid())
  email  String  @unique
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  title     String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  @@index([name])
}

enum PostType {
  CONSTRUCTION
  FINISHED
}

model Post {
  id        String   @id @default(cuid())
  type      PostType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  title     String
  client    String
  date      DateTime
  local     String   @default("")
  deadline  String

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  categoryId String

  mainImageUrl String
  images       Image[]
}

model Image {
  id         String   @id @default(cuid())
  url        String
  uploadedAt DateTime @default(now())
  Post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String
}

model Counter {
  id                 String @id @default(cuid())
  finishedBuilds     String @default("0")
  constructionBuilds String @default("0")
  awards             String @default("0")
}
